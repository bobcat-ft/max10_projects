	component cx_system is
		port (
			altpll_0_locked_conduit_export           : out std_logic;                                        -- export
			bme280_i2c_0_bme_output_data             : out std_logic_vector(95 downto 0);                    -- data
			bme280_i2c_0_bme_output_error            : out std_logic_vector(1 downto 0);                     -- error
			bme280_i2c_0_bme_output_valid            : out std_logic;                                        -- valid
			bme280_i2c_0_control_conduit_busy_out    : out std_logic;                                        -- busy_out
			bme280_i2c_0_control_conduit_continuous  : in  std_logic                     := 'X';             -- continuous
			bme280_i2c_0_control_conduit_enable      : in  std_logic                     := 'X';             -- enable
			bme280_i2c_0_i2c_interface_i2c_ack_error : in  std_logic                     := 'X';             -- i2c_ack_error
			bme280_i2c_0_i2c_interface_i2c_addr      : out std_logic_vector(6 downto 0);                     -- i2c_addr
			bme280_i2c_0_i2c_interface_i2c_busy      : in  std_logic                     := 'X';             -- i2c_busy
			bme280_i2c_0_i2c_interface_i2c_data_rd   : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- i2c_data_rd
			bme280_i2c_0_i2c_interface_i2c_data_wr   : out std_logic_vector(7 downto 0);                     -- i2c_data_wr
			bme280_i2c_0_i2c_interface_i2c_ena       : out std_logic;                                        -- i2c_ena
			bme280_i2c_0_i2c_interface_i2c_rw        : out std_logic;                                        -- i2c_rw
			clk_clk                                  : in  std_logic                     := 'X';             -- clk
			reset_reset_n                            : in  std_logic                     := 'X'              -- reset_n
		);
	end component cx_system;

